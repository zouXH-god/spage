name: Build & Publish All-in-One

on:
  push:
    tags: [xgo-v*]
  workflow_dispatch:

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  BOT_TOKEN: ${{ secrets.LITEYUKIFLOW_TOKEN }}
  BIN_NAME: spage
  BIN_OUT: build
  FRONTEND_DIR: web-src
  # for Go build
  GO_PKG_ROOT: github.com/LiteyukiStudio/spage
  GO_ENTRYPOINT_SERVER: ./cmd/server
  # for container build
  CONTAINER_PLATFORMS: linux/amd64,linux/arm64,linux/386,linux/arm,linux/ppc64le,linux/s390x
  REG_GHCR: ghcr.io
  REG_DOCKERHUB: docker.io
  REG_LCR: reg.liteyuki.org
  NAMESPACE_GHCR: liteyukistudio
  NAMESPACE_DOCKERHUB: liteyukistudio
  NAMESPACE_LCR: spage
  ARCH_MAP: |
    amd64:amd64-v1
    arm64:arm64
    arm:armv7
    386:386-sse2
    ppc64le:ppc64le
    s390x:s390x
  

concurrency:
  group: "build-aio"
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            ${{ env.FRONTEND_DIR }}/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('${{ env.FRONTEND_DIR }}/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
            pnpm-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build frontend
        run: |
          cd ${{ env.FRONTEND_DIR }}
          npm install pnpm -g
          pnpm install
          pnpm build

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: ${{ env.FRONTEND_DIR }}/out
          retention-days: 30

  backend-xgo:
    name: Build Backend with xgo
    needs: frontend
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      nightly: ${{ steps.version.outputs.nightly }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Set version/tag
        id: version
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          TAG="${VERSION}"
          NIGHTLY="false"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "nightly=${NIGHTLY}" >> $GITHUB_OUTPUT

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: web
          path: static/dist/

      - name: Build with xgo
        uses: crazy-max/ghaction-xgo@v3
        with:
          xgo_version: latest
          go_version: 1.22
          dest: build
          pkg: ${{ env.GO_ENTRYPOINT_SERVER }}
          targets: |
            linux/amd64
            linux/386
            linux/arm-5
            linux/arm-6
            linux/arm-7
            linux/arm64
            linux/mips
            linux/mipsle
            windows/386
            windows/amd64
            darwin/amd64
            darwin/arm64
          buildmode: default
          ldflags: >
            -X '${{ env.GO_PKG_ROOT }}/config.CommitHash=${{ github.sha }}'
            -X '${{ env.GO_PKG_ROOT }}/config.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)'
            -X '${{ env.GO_PKG_ROOT }}/config.Version=${{ steps.version.outputs.version }}'
          cgo_enabled: true
          trimpath: true

      - name: List built files
        run: ls -lh build/

      - name: Rename xgo output
        run: |
          mkdir -p dist
          for f in build/*; do
            platform=$(basename "$f" | sed 's/.*-//')
            mv "$f" "dist/${{ env.BIN_NAME }}-${platform}"
          done

      - name: Upload all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BIN_NAME }}-xgo
          path: dist/*
          retention-days: 30


  container:
    name: Build & Publish Container Images
    runs-on: ubuntu-latest
    needs: backend-xgo
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all linux artifacts for docker
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.BIN_NAME }}-linux-*
          path: build/
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REG_GHCR }}
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REG_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to LCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REG_LCR }}
          username: ${{ secrets.LITEYUKIREG_USER }}
          password: ${{ secrets.LITEYUKIREG_TOKEN }}

      - name: Build & Push Docker Images (tag & latest)
        if: ${{ needs.backend.outputs.nightly == 'false' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.NAMESPACE_DOCKERHUB }}/${{ env.BIN_NAME }}:${{ needs.backend.outputs.tag }}
            ${{ env.NAMESPACE_DOCKERHUB }}/${{ env.BIN_NAME }}:latest
            ${{ env.NAMESPACE_DOCKERHUB }}/${{ env.BIN_NAME }}:nightly
            ${{ env.REG_GHCR }}/${{ env.NAMESPACE_GHCR }}/${{ env.BIN_NAME }}:${{ needs.backend.outputs.tag }}
            ${{ env.REG_GHCR }}/${{ env.NAMESPACE_GHCR }}/${{ env.BIN_NAME }}:latest
            ${{ env.REG_GHCR }}/${{ env.NAMESPACE_GHCR }}/${{ env.BIN_NAME }}:nightly
            ${{ env.REG_LCR }}/${{ env.NAMESPACE_LCR }}/${{ env.BIN_NAME }}:${{ needs.backend.outputs.tag }}
            ${{ env.REG_LCR }}/${{ env.NAMESPACE_LCR }}/${{ env.BIN_NAME }}:latest
            ${{ env.REG_LCR }}/${{ env.NAMESPACE_LCR }}/${{ env.BIN_NAME }}:nightly
          platforms: ${{ env.CONTAINER_PLATFORMS }}

      - name: Build & Push Docker Images (nightly only)
        if: ${{ needs.backend.outputs.nightly == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.NAMESPACE_DOCKERHUB }}/${{ env.BIN_NAME }}:nightly
            ${{ env.REG_GHCR }}/${{ env.NAMESPACE_GHCR }}/${{ env.BIN_NAME }}:nightly
            ${{ env.REG_LCR }}/${{ env.NAMESPACE_LCR }}/${{ env.BIN_NAME }}:nightly
          platforms: ${{ env.CONTAINER_PLATFORMS }}

  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: backend-xgo
    steps:
      - name: Download all linux artifacts for docker
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.BIN_NAME }}-*
          path: dist/
          merge-multiple: true

      - name: Publish GitHub Release(tag & latest)
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.backend-xgo.outputs.tag }}
          artifacts: dist/${{ env.BIN_NAME }}-*
          name: "Release ${{ needs.backend-xgo.outputs.tag }}"
          generateReleaseNotes: true
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Edit Changelog
        run: |
          npx changelogithub || true
        env:
          GITHUB_TOKEN: ${{ env.BOT_TOKEN }}